name: "Terraform Plan"

concurrency: production
on:
  pull_request:
  push:
    branches:
      - main

env:
  AWS_REGION: us-east-1

jobs:
  terraform-plan:
    name: "Check terraform plan"
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_REGION }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Setup terraform
        uses: hashicorp/setup-terraform@v3

      - name: Initialize tf-infra
        run: terraform init
        working-directory: ./tf/infra


      - name: Plan tf-infra
        run: terraform plan -out=.infra.plan
        working-directory: ./tf/infra

      - name: Post PR comment tf-infra
        uses: borchero/terraform-plan-comment@v2
        with:
          token: ${{ github.token }}
          planfile: .infra.plan
          working-directory: ./tf/infra

      - name: Initialize tf-app
        run: terraform init
        working-directory: ./tf/app

      - name: Plan tf-app
        run: terraform plan -out=.app.plan -var "lambda_image_uri=(must be set in the apply step)"
        working-directory: ./tf/app

      - name: Post PR comment tf-app
        uses: borchero/terraform-plan-comment@v2
        with:
          token: ${{ github.token }}
          planfile: .app.plan
          working-directory: ./tf/app

  terraform-apply-infra:
    needs: terraform-plan
    name: "Apply infra changes"
    runs-on: ubuntu-latest
    environment: production
    if: github.ref == 'refs/heads/main'
    permissions:
      contents: read
      pull-requests: write
    outputs:
      container_registry_url: ${{ steps.terraform_outputs.outputs.container_registry_url }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup terraform
        uses: hashicorp/setup-terraform@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_REGION }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Initialize
        run: terraform init
        working-directory: ./tf/infra

      - name: Apply
        run: terraform apply -auto-approve
        working-directory: ./tf/infra

      - name: Get terraform outputs
        id: terraform_outputs
        working-directory: ./tf/infra
        run: |
          echo "container_registry_url=$(terraform output -raw container_registry_url)" >> $GITHUB_OUTPUT;

  terraform-apply-app:
    needs: terraform-apply-infra
    name: "Apply app changes"
    runs-on: ubuntu-latest
    env:
      IMAGE_URI: ${{ needs.terraform-apply-infra.outputs.container_registry_url }}:${{ github.sha }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup terraform
        uses: hashicorp/setup-terraform@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_REGION }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and push lambda image
        id: build-lambda-images
        run: |
          docker build -t ${{ env.IMAGE_URI }} .
          docker push ${{ env.IMAGE_URI }}

      - name: Initialize
        run: terraform init
        working-directory: ./tf/app

      - name: Apply
        run: terraform apply -auto-approve -var "lambda_image_uri=${{ env.IMAGE_URI }}"
        working-directory: ./tf/app

